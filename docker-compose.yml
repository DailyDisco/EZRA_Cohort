services:
  postgres:
    image: postgres:15
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    container_name: rentdaddy-postgres
    restart: always
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-appuser} -d ${POSTGRES_DB:-appdb}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${PORT:-8080}:${PORT:-8080}"
      - "2345:2345"
    depends_on:
      postgres:
        condition: service_healthy
    container_name: rentdaddy-backend
    restart: always
    volumes:
      - /app/tmp
      - /app/temp
      - ./backend/tmp:/app/tmp
      - ./backend/temp:/app/temp
    env_file: .env
    environment:
      - POSTGRES_HOST=postgres
      - PG_URL=postgresql://${POSTGRES_USER:-appuser}:${POSTGRES_PASSWORD:-apppassword}@postgres:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-appdb}?sslmode=disable
    networks:
      - app-network
      - documenso-rentdaddy
    #command: ["/bin/sh", "-c", "chmod +x /app/entrypoint.sh && chown root:root /app/entrypoint.sh && /app/entrypoint.sh"]

  frontend:
    build:
      context: ./frontend/app
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${VITE_API_URL}
        - VITE_CLERK_PUBLISHABLE_KEY=${VITE_CLERK_PUBLISHABLE_KEY}
    ports:
      - "${FRONTEND_PORT:-5173}:80"
    volumes:
      - ./frontend/app:/app
      - /app/node_modules
    networks:
      - app-network
    env_file:
      - .env # Load .env file

networks:
  app-network:
    driver: bridge
  documenso-rentdaddy:
    external: true

volumes:
  postgres_data:
  go-mod-cache:
